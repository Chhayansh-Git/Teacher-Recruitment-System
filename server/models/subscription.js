// server/models/subscription.js

import mongoose from 'mongoose';

/**
 * @description Represents the subscription of a school to a specific plan.
 * It links a school to a plan and tracks the subscription's lifecycle.
 */
const subscriptionSchema = new mongoose.Schema({
    // Core Relationships
    school: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'School',
        required: true,
        index: true,
        description: 'The school that owns this subscription.'
    },
    plan: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Plan',
        required: true,
        description: 'The plan to which the school is subscribed.'
    },

    // Razorpay Integration IDs
    razorpaySubscriptionId: {
        type: String,
        required: true,
        unique: true,
        trim: true,
        description: 'The unique subscription ID generated by Razorpay.'
    },
    razorpayPaymentId: {
        type: String,
        trim: true,
        description: 'The ID of the latest successful payment for this subscription from Razorpay.'
    },
    razorpaySignature: {
        type: String,
        trim: true,
        description: 'The signature received from Razorpay to verify webhook authenticity.'
    },

    // Subscription Lifecycle & Status
    status: {
        type: String,
        required: true,
        enum: [
            'trialing',   // During a free trial period
            'active',     // Actively subscribed, payments are up-to-date
            'pending',    // Awaiting payment confirmation
            'past_due',   // Payment failed, in grace period
            'canceled',   // Canceled by the user, will expire at the end of the period
            'expired'     // The subscription has ended and is no longer active
        ],
        default: 'pending',
        description: 'The current status of the subscription.'
    },
    startDate: {
        type: Date,
        description: 'The date when the subscription officially starts (e.g., after trial ends).'
    },
    endDate: {
        type: Date,
        description: 'The date when the current billing period ends and the subscription will renew or expire.'
    },
    trialEndDate: {
        type: Date,
        description: 'If applicable, the date when the free trial period ends.'
    },

    // Usage Tracking
    // These fields are denormalized from the plan for performance and historical accuracy.
    // If a plan's limits change, existing subscriptions are not affected.
    jobPostLimit: {
        type: Number,
        required: true,
        description: 'The job post limit for this school under this subscription.'
    },
    jobPostsUsed: {
        type: Number,
        default: 0,
        description: 'The number of job posts used in the current billing cycle.'
    }

}, {
    timestamps: true // Adds createdAt and updatedAt timestamps
});

const Subscription = mongoose.model('Subscription', subscriptionSchema);

export default Subscription;